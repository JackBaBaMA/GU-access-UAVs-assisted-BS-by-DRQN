import random
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import gym

# Define the DRQN network
class DRQN(nn.Module):
    def __init__(self, num_inputs, num_actions, hidden_size=64):
        super(DRQN, self).__init__()
        self.hidden_size = hidden_size
        self.lstm = nn.LSTM(num_inputs, hidden_size)
        self.fc = nn.Linear(hidden_size, num_actions)

    def forward(self, x, hidden):
        x, (hn, cn) = self.lstm(x, hidden)
        x = self.fc(x)
        return x, (hn, cn)

# Define the replay buffer
class ReplayBuffer:
    def __init__(self, capacity):
        self.capacity = capacity
        self.buffer = []
        self.position = 0

    def push(self, state, action, reward, next_state, done):
        if len(self.buffer) < self.capacity:
            self.buffer.append(None)
        self.buffer[self.position] = (state, action, reward, next_state, done)
        self.position = (self.position + 1) % self.capacity

    def sample(self, batch_size):
        batch = random.sample(self.buffer, batch_size)
        state, action, reward, next_state, done = zip(*batch)
        return np.stack(state), np.stack(action), np.stack(reward), np.stack(next_state), np.stack(done)

    def __len__(self):
        return len(self.buffer)

# Hyperparameters
learning_rate = 0.001
gamma = 0.99
batch_size = 64
target_update = 10
num_episodes = 1000
replay_buffer_capacity = 10000
epsilon_start = 1.0
epsilon_final = 0.01
epsilon_decay = 0.995

# Initialize the environment and the DRQN networks
env = gym.make('CartPole-v1')
num_inputs = env.observation_space.shape[0]
num_actions = env.action_space.n
drqn = DRQN(num_inputs, num_actions)
target_drqn = DRQN(num_inputs, num_actions)
target_drqn.load_state_dict(drqn.state_dict())
target_drqn.eval()

# Initialize the optimizer and the replay buffer
optimizer = optim.Adam(drqn.parameters(), lr=learning_rate)
replay_buffer = ReplayBuffer(replay_buffer_capacity)

# Epsilon-greedy exploration
def select_action(state, epsilon, hidden):
    if random.random() < epsilon:
        return env.action_space.sample()
    else:
        with torch.no_grad():
            q_values, _ = drqn(torch.tensor(state, dtype=torch.float32).unsqueeze(0), hidden)
            return q_values.max(2)[1].item()

# Training loop
epsilon = epsilon_start
for episode in range(num_episodes):
    state = env.reset()
    episode_reward = 0
    hidden = (torch.zeros(1, 1, drqn.hidden_size), torch.zeros(1, 1, drqn.hidden_size))

    for timestep in range(1, 10000):  # Replace 10000 with an appropriate episode length
        action = select_action(state, epsilon, hidden)
        next_state, reward, done, _ = env.step(action)

        replay_buffer.push(state, action, reward, next_state, done)

        state = next_state
        episode_reward += reward

        if len(replay_buffer) > batch_size:
            batch_state, batch_action, batch_reward, batch_next_state, batch_done = replay_buffer.sample(batch_size)
            
            q_values, _ = drqn(torch.tensor(batch_state, dtype=torch.float32), hidden)
            q_values = q_values.gather(2, torch.tensor(batch_action, dtype=torch.int64).unsqueeze(2)).squeeze(2)
            
            next_q_values, _ = target_drqn(torch.tensor(batch_next_state, dtype=torch.float32), hidden)
            next_q_values = next_q_values.max(2)[0].detach()
            expected_q_values = (next_q_values * gamma) + torch.tensor(batch_reward, dtype=torch.float32)

            loss = F.smooth_l1_loss(q_values, expected_q_values.unsqueeze(1))
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

        if done:
            break

    # Update target network
    if episode % target_update == 0:
        target_drqn.load_state_dict(drqn.state_dict())

    # Epsilon decay
    epsilon = max(epsilon_final, epsilon * epsilon_decay)

    print(f"Episode {episode + 1}, Reward: {episode_reward}")

env.close()
